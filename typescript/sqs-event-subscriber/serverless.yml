service: event-subscriber

plugins:
  - serverless-pseudo-parameters
  - serverless-cloudformation-sub-variables

provider:
  name: aws
  runtime: nodejs22.x
  stage: ${opt:stage, 'dev'}
  region: us-east-2
  memorySize: 512
  tracing:
    lambda: true
  iamManagedPolicies:
    - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
      Resource:
        - "arn:aws:sqs:${self:provider.region}:#{AWS::AccountId}:EventConsumerQueue-${opt:stage, 'dev'}"
    - Effect: "Allow"
      Action:
        - "sqs:ListQueues"
      Resource: "arn:aws:sqs:${self:provider.region}:#{AWS::AccountId}:*"
    - Effect: "Allow"
      Action:
        - dynamodb:List*,
        - dynamodb:DescribeReservedCapacity*,
        - dynamodb:DescribeLimits,
        - dynamodb:DescribeTimeToLive,
      Resource: '*'
    - Effect: "Allow"
      Action:
        - dynamodb:BatchGet*
        - dynamodb:DescribeStream
        - dynamodb:DescribeTable
        - dynamodb:Get*
        - dynamodb:Query
        - dynamodb:Delete*
        - dynamodb:Update*
        - dynamodb:PutItem
      Resource:
        - !GetAtt EventSubscriberMessageTable.Arn

  timeOut: 30
  stackTags:
    ServiceName: ${self:service}
  event-consumer-${opt:stage, 'dev'}:
    handler: build/events/sqs/event-subscriber.handler
    environment:
      ENVIRONMENT: ${opt:stage, 'dev'}
    timeout: ${self:provider.timeOut}
    events:
      - sqs:
          arn:
            Fn::GetAtt: [EventSubscriberQueue, Arn]

resources:
  - ${file(./cf/sqs.yml)}
  - ${file(./cf/dynamo.yml)}